{"version":3,"sources":["DarkMode.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["setDark","localStorage","setItem","document","documentElement","setAttribute","storedTheme","getItem","prefersDark","window","matchMedia","matches","defaultDark","toggleTheme","e","target","checked","DarkMode","className","htmlFor","type","id","onChange","defaultChecked","App","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uOAIMA,EAAU,WAEdC,aAAaC,QAAQ,QAAS,QAG9BC,SAASC,gBAAgBC,aAAa,aAAc,SAShDC,EAAcL,aAAaM,QAAQ,SAEnCC,EACJC,OAAOC,YACPD,OAAOC,WAAW,gCAAgCC,QAE9CC,EACY,SAAhBN,GAA2C,OAAhBA,GAAwBE,EAEjDI,GACFZ,IAIF,IAAMa,EAAoD,SAACC,GACrDA,EAAEC,OAAOC,QACXhB,KArBFC,aAAaC,QAAQ,QAAS,SAC9BC,SAASC,gBAAgBC,aAAa,aAAc,WA6CvCY,EAnBE,WACf,OACE,sBAAKC,UAAU,uBAAf,UACE,gDACA,wBAAOA,UAAU,eAAeC,QAAQ,WAAxC,UACE,uBACEC,KAAK,WACLC,GAAG,WAEHC,SAAUT,EACVU,eAAgBX,IAElB,qBAAKM,UAAU,oBAEjB,oD,MChBSM,MAlCf,WACE,OACE,sBAAKN,UAAU,MAAf,UACE,sBACEO,IAAI,aACJC,KAAK,4DAEP,wBAAQR,UAAU,aAAlB,SACE,+BACE,8BACE,+BACE,cAAC,EAAD,IACA,6BACE,mBAAGQ,KAAK,IAAR,SACE,mBAAGR,UAAU,iBAAb,sBAGJ,6BACE,mBAAGQ,KAAK,QAAR,qBAEF,6BACE,mBAAGA,KAAK,UAAR,wBAEF,6BACE,mBAAGA,KAAK,UAAR,oCCdDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASoC,eAAe,SAM1BZ,M","file":"static/js/main.9d20a58c.chunk.js","sourcesContent":["import \"./DarkMode.css\";\nimport { ChangeEventHandler } from \"react\";\n\n// 1\nconst setDark = () => {\n  // 2\n  localStorage.setItem(\"theme\", \"dark\");\n\n  // 3\n  document.documentElement.setAttribute(\"data-theme\", \"dark\");\n};\n\nconst setLight = () => {\n  localStorage.setItem(\"theme\", \"light\");\n  document.documentElement.setAttribute(\"data-theme\", \"light\");\n};\n\n// 4\nconst storedTheme = localStorage.getItem(\"theme\");\n\nconst prefersDark =\n  window.matchMedia &&\n  window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\nconst defaultDark =\n  storedTheme === \"dark\" || (storedTheme === null && prefersDark);\n\nif (defaultDark) {\n  setDark();\n}\n\n// 5\nconst toggleTheme: ChangeEventHandler<HTMLInputElement> = (e) => {\n  if (e.target.checked) {\n    setDark();\n  } else {\n    setLight();\n  }\n};\n\nconst DarkMode = () => {\n  return (\n    <div className=\"toggle-theme-wrapper\">\n      <span>‚òÄÔ∏è</span>\n      <label className=\"toggle-theme\" htmlFor=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          id=\"checkbox\"\n          // 6\n          onChange={toggleTheme}\n          defaultChecked={defaultDark}\n        />\n        <div className=\"slider round\"></div>\n      </label>\n      <span>üåí</span>\n    </div>\n  );\n};\n\nexport default DarkMode;\n","import React from \"react\";\nimport DarkMode from \"./DarkMode\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      />\n      <header className=\"App-header\">\n        <body>\n          <nav>\n            <ul>\n              <DarkMode />\n              <li>\n                <a href=\"/\">\n                  <i className=\"material-icons\">home</i>\n                </a>\n              </li>\n              <li>\n                <a href=\"about\">About</a>\n              </li>\n              <li>\n                <a href=\"service\">Services</a>\n              </li>\n              <li>\n                <a href=\"contact\">Contact</a>\n              </li>\n            </ul>\n          </nav>\n        </body>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}